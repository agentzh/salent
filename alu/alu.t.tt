[% DEFAULT
     version = '0.13'
     list_file = 'alu.lst'
     perl_file = 'alu.t'
     solu_file = 'alu.exe.out'
     ops = [  # operands must all be in hex form
        { op = 'mul', A = '20', B = 0,
          op_time = 0, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'imul', A = 'fffffffd', B = 2,
          op_time = 0, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'mul', A = 'fffffffd', B = 2,
          op_time = 1, A_time = 2, B_time = 1,
          run_time = 4 }
        { op = 'div', A = 6, B = 'fffffffe', D = 0,
          op_time = 1, A_time = 0, B_time = 1, D_time = 1,
          run_time = 4 }
        { op = 'idiv', A = 6, B = 'fffffffe',
          op_time = 0, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'nop', op_time = 1, run_time = 4 }
        { op = 'add', A = 5, B = 6,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'add', A = 5, B = 6, cin = 1,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'add', A = 5, B = 6, cin = 0,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'sub', A = 'fffffffd', B = 9,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'sub', A = 'fffffffd', B = 9, cin = 1,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'sub', A = 'd', B = 9, cin = 1,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'sub', A = 'fffffffd', B = 9, cin = 0,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'nop', op_time = 1, run_time = 4 }
        { op = 'xor', A = 'fffffffe', B = 3,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'and', A = 'fffffffe', B = 'fffffffd',
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'or', A = 'fffffffe', B = 3,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'neg', A = 5,
          op_time = 1, A_time = 0,
          run_time = 4 }
        { op = 'not', A = 'b',
          op_time = 1, A_time = 0,
          run_time = 4 }
        { op = 'nop', op_time = 1, run_time = 4 }
        { op = 'shl', A = 'fffffffe', B = 2,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'shr', A = 'fffffffe', B = 2,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'sal', A = 'fffffffe', B = 2,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'sar', A = 'fffffffe', B = 2,
          op_time = 2, A_time = 0, B_time = 1,
          run_time = 4 }
        { op = 'rol', A = 'fffffffe', B = 2, cin = 0,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 1,
          run_time = 4 }
        { op = 'ror', A = 'fffffffe', B = 2, cin = 1,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'rcl', A = 'fffffffe', B = 2, cin = 1,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
        { op = 'rcr', A = 'fffffffe', B = 2, cin = 0,
          op_time = 2, A_time = 0, B_time = 1, cin_time = 2,
          run_time = 4 }
     ]
-%]
[% USE date;
   USE Perl -%]
[% SET
     last_mod = date.format(template.modtime, '20%y-%m-%d', 'en_GB')
     year = date.format(template.modtime, '20%y', 'en_GB')
-%]
#: [% perl_file %]
#: Working with alu.do.tt to check in simulation list
#:   outputs of alu.v
#: This file was generated according to alu.t.tt
#: Salent v[% version %]
#: Copyright (C) [% year %] Agent Zhang.
#: 2005-07-12 [% last_mod %]

use strict;
use warnings;

[%- tests = 1 -%]
[% FOREACH op IN ops;
    tests = tests + 1;
    IF op.op != 'nop';
        tests = tests + 1;
        IF op.op == 'mul' OR op.op == 'imul' OR
           op.op == 'div' OR op.op == 'idiv';
            tests = tests + 2;
        END;
        IF op.cin.defined;
            tests = tests + 1;
        END;
    END;
  END
-%]

use Test::More tests => [% tests %];
use ModelSim::List;

my $fh;
ok(open($fh, "[% solu_file %]"), 'Open the solution file');
<$fh>;  # Shift the first line

my $list = ModelSim::List->new;
$list->parse('[% list_file %]');

my $line;
my @sols;
my $cf;

[%- start = 0 -%]
[% FOREACH op IN ops -%]

    [%- end = start + op.run_time -%]
    [%- des = Perl.sprintf('%s %s - %s($.) - (@ %d ~ %d)', op.op, op.A, solu_file, start, end) -%]

$line = <$fh>;
ok(defined $line, 'Not the end of file');
    [%- IF op.op != 'nop' %]
@sols = split(/\s+/, $line);
like($list->strobe('/alu/res1', [% start + op.run_time %]), qr/^0*$sols[1]$/i, "
    [%- des %] - res1");

        [%- IF op.op == 'mul' OR op.op == 'imul' OR
               op.op == 'div' OR op.op == 'idiv' -%]
is(scalar(@sols), 3, "number of items in line $. is 3");
like($list->strobe('/alu/res2', [% start + op.run_time %]), qr/^0*$sols[2]$/i, "
    [%- des %] - res2");
        [%- END -%]

        [%- IF op.cin.defined -%]
$cf = substr($sols[0], -1, 1);
like($list->strobe('/alu/cout', [% start + op.run_time %]), qr/^0*$cf$/i, "
    [%- des %] - cout");
        [%- END -%]
    [%- END %]
    [% start = start + op.run_time -%]
[% END -%]

close $fh;
