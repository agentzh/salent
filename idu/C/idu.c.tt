[% DEFAULT
    version = '0.13'
    idu = {
        reg_fields = []
        bit_fields = []
        state_machine = []
        prefixes = []
    }
-%]
[% USE date;
   USE Perl -%]
[% SET
     last_mod = date.format(template.modtime, '20%y-%m-%d', 'en_GB')
     states = idu.state_machine
-%]
//: idu.c
//: C implemetation of Instruction Decoding Unit (IDU)
//: Salent v[% version %]
//: Copyright (c) 2005 Agent Zhang
//: 2005-08-17 [% last_mod %]

#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <stdio.h>

#define _IDU_C_
#include <idu.h>

#define NELEMS(list) sizeof(list)/sizeof((list)[0])

#define READ_DISP(len) \
    retval = readbytes(bytes, (len)); \
    if (retval != (len)) return retval; \
    memcpy(res->disp, bytes, len); \
    res->disp_len = len;

#define READ_SIB \
    retval = readbytes(bytes, 1); \
    if (retval != 1) return retval; \
    byte = bytes[0];

#define READ_BYTE \
    retval = readbytes(bytes, 1); \
    if (retval == EOF) { \
        state = S_END_ERROR; \
        break; \
    } else if (retval == 0) { \
        state = S_SYN_ERROR; \
        break; \
    } \
    byte = bytes[0];

#define READ_IMM_DATA(len) \
    retval = readbytes(bytes, (len)); \
    if (retval == EOF) { \
        state = S_END_ERROR; \
        break; \
    } else if (retval == 0) { \
        state = S_SYN_ERROR; \
        break; \
    } \
    memcpy(res->imm, bytes, (len)); \
    res->imm_len = (len);

#define CARP(fmt,val) \
    fprintf(stderr, fmt##" - %s(line %d)\n", (val), __FILE__, __LINE__);

enum {
    BUFSIZE = 256,
    UNDEF = -1
};

static const char* Source;
static char Token[BYTES_LEN];
static char Error[BUFSIZE];

static int Debug = 0;

void set_source(char* buf) {
    Source = buf;
    strcpy(Token, "");
}

char* get_source(void) {
    return (char*) Source;
}

// get the current token:
char* get_cur_token(void) {
    return Token;
}

// get the error info:
char* get_error_info(void) {
    return Error;
}

// set the debug mode:
int set_debug(int value) {
    int oldval;
    oldval = Debug;
    Debug = value;
    return oldval;
}

// read one or more bytes from the source:
int readbytes(Byte* outbuf, int len) {
    enum { FMTSIZE = 10 };
    char fmt[FMTSIZE];
    int i, j, token_len;

    sprintf(fmt, "%%%ds", NELEMS(Token)-1);
    //CARP("fmt - %s", fmt);
    for (i = 0; i < len; i++) {
        int retval;
        while (*Source == ' ' || *Source == '\t' || *Source == '\n')
            Source++;
        retval = sscanf(Source, fmt, Token);
        //CARP("%d", retval);
        if (retval == 0 || retval == EOF) {
            //CARP("retval - %d", retval)
            //Source = "";
            return retval;
        }
        token_len = strlen(Token);
        Source += token_len;
        //CARP("token_len : %d", token_len)
        for (j = 0; j < token_len; j++) {
            if ((Token[j] >= '0' && Token[j] <= '9') ||
                (Token[j] >= 'a' && Token[j] <= 'f') ||
                Token[j] >= 'A' && Token[j] <= 'F')
                continue;
            else
                return 0;
        }
        if (token_len != 2) return 0;
        //CARP("%s", Token);
        //CARP("%s", Source);
        retval = sscanf(Token, "%02x", outbuf+i);
        //CARP("%02x", outbuf[0]);
        if (retval == 0 || retval == EOF) {
            //CARP("retval - %d", retval)
            return retval;
        }
    }
    //CARP("%02x", outbuf[0]);
    return len;
}

// slice the byte via subscripts:
Byte slice(Byte byte, int i, int j) {
    Byte retval = 0;
    assert(i >= j);
    while (i >= j) retval += byte & (1 << i--);
    return retval >>= j;
}

// match the byte against the pattern:
int match(Byte byte, const char* pat) {
    Byte filter, c;
    for (filter = 0x80; (c = *pat) != '\0'; filter >>= 1, pat++) {
        //printf("%c", c);
        if (c == '.') continue;
        if (byte & filter) {
            if (c == '0') return 0;
        } else {
            if (c == '1') return 0;
        }
    }
    return 1;
}

static int defined(int fld) {
    return fld != UNDEF;
}

// derive the length of immediate data (in bytes):
int get_imm_len(int s, int w, int bits16) {
    if (defined(s) && !defined(w)) {
        if (s == 1) // 8-bit imm size
            return 1;
        else // full size imm size
            return bits16 == 1 ? 2 : 4;
    } else if (defined(w) && !defined(s)) {
        if (w == 0) // 8-bit imm size
            return 1;
        else // full size imm size
            return bits16 == 1 ? 2 : 4;
    } else if (defined(w) && defined(s)) {
        if (s == 1) // 8-bit imm size
            return 1;
        else if (w == 0) // 8-bit imm size
            return 1;
        else
            return bits16 == 1 ? 2 : 4;
    } else { // both w and s fields are absent
        return bits16 == 1 ? 2 : 4;
    }
}

// Process the ModR/M byte:
int process_ModRM(Result* res, Byte byte) {
    int mod, rm, base, retval;
    Byte bytes[NBYTES_MAX];
    mod = slice(byte, 7, 6);
    rm  = slice(byte, 2, 0);
    res->mod = mod;
    res->rm  = rm;
    if (mod == 0 /* 00 */) {
        if (rm == 5 /* 101 */) { // Direct: EA = Disp32
            // Get 32-bit displacement:
            READ_DISP(4)
        } else if (rm == 4 /* 100 */) { // Base with index (uses SIB byte)
            // Get SIB byte:
            READ_SIB
            byte = bytes[0];
            res->scale = slice(byte, 7, 6);
            res->index_reg = slice(byte, 5, 3);
            base = slice(byte, 2, 0);
            if (base == 5 /* 101 */) { // Base == EBP: EA = [Index] x Scale + Disp32
                // Get 32-bit displacement:
                READ_DISP(4)
            } else { // EA = [Base] + [Index] x Scale
                res->base_reg = base;
            }
        }
    } else if (mod == 1 /* 01 */) {
        if (rm == 4 /* 100 */) { // EA = [Base] + [Index] x Scale + Disp8
            // Get SIB byte:
            READ_SIB
            res->scale     = slice(bytes[0], 7, 6);
            res->index_reg = slice(bytes[0], 5, 3);
            res->base_reg  = slice(bytes[0], 2, 0);
            // Get 8-bit displacement:
            READ_DISP(1)
        } else { // EA = [Reg] + Disp8
            // Get 8-bit displacement:
            READ_DISP(1)
        }
    } else if (mod == 2 /* 10 */) {
        if (rm == 4 /* 100 */) { // EA = [Base] + [Index] x Scale + Disp32
            // Get SIB byte:
            READ_SIB
            res->scale     = slice(bytes[0], 7, 6);
            res->index_reg = slice(bytes[0], 5, 3);
            res->base_reg  = slice(bytes[0], 2, 0);
            // Get 32-bit displacement:
            READ_DISP(4)
        } else { // EA = [Reg] + Disp32
            // Get 32-bit displacement:
            READ_DISP(4)
        }
    }
    return 1;
}

Result* new_res() {
    Result* res = (Result*) malloc(sizeof(Result));
    assert(res);
    memset(res, 0, sizeof(Result));
[%- FOREACH bit IN idu.bit_fields %]
    res->[% bit %] = UNDEF;
[%- END -%]

[%- FOREACH reg IN idu.reg_fields %]
    res->[% reg %] = UNDEF;
[%- END %]
    res->mod = UNDEF;
    res->rm  = UNDEF;
    res->base_reg = UNDEF;
    res->index_reg = UNDEF;
    res->scale = UNDEF;
    return res;
}

void dump_byte(Byte byte, char* outbuf) {
    int i;
    for (i = 0; i < 8; i++)
        sprintf(outbuf++, "%1d", ((0x80 >> i) & byte) ? 1 : 0);
    *outbuf = '\0';
}

// dump the content of Result instance to the given file handle:
void dump_res(Result* res, FILE* fh) {
    enum { BUFSIZE = 10 };
    char buf[BUFSIZE];

    fprintf(fh, "Instruction Set : %s\nInstruction: %s\nDescription: %s\n",
        res->ins_set, res->ins, res->des);
    if (res->subdes) fprintf(fh, "Sub-Description: %s\n", res->subdes);
    fprintf(fh, "Encoding Pattern: %s\n", res->encoding);

    fprintf(fh, "Operand-Size Attribute: ");
    if (res->bits16 == 1) fprintf(fh, "16-bit\n");
    else fprintf(fh, "32-bit\n");

[%- FOREACH bit IN idu.bit_fields %]
    if (defined(res->[% bit %]))
        fprintf(fh, "[% bit %] Field: %1d\n", res->[% bit %]);
[% END -%]

[%- FOREACH reg IN ['reg', 'reg1', 'reg2', 'sreg3', 'eee', 'ST_i'] %]
    dump_byte((Byte)res->[% reg %], buf);
    if (defined(res->[% reg %])) {
        fprintf(fh, "[% reg %] Field: %3s\n", buf + 5);
    }
[%- END %]

[%- FOREACH reg IN ['tttn'] %]
    dump_byte((Byte)res->[% reg %], buf);
    if (defined(res->[% reg %])) {
        fprintf(fh, "[% reg %] Field: %4s\n", buf + 4);
    }
[%- END %]

    dump_byte((Byte)res->sreg2, buf);
    if (defined(res->sreg2)) {
        fprintf(fh, "sreg2 Field: %2s\n", buf + 6);
    }

    if (defined(res->mod)) {
        dump_byte((Byte)res->mod, buf);
        fprintf(fh, "Mod field: %2s\n", buf + 6);
        dump_byte((Byte)res->rm, buf);
        fprintf(fh, "R/M field: %3s\n", buf + 5);
    }

    if (defined(res->base_reg)) {
        dump_byte((Byte)res->base_reg, buf);
        fprintf(fh, "Base Register: %3s\n", buf + 5);
    }
    if (defined(res->index_reg)) {
        dump_byte((Byte)res->index_reg, buf);
        fprintf(fh, "Index Register: %3s\n", buf + 5);
    }
    if (defined(res->scale)) {
        dump_byte((Byte)res->scale, buf);
        fprintf(fh, "Scale for Index Register: %2s\n", buf + 6);
    }
    if (res->disp_len > 0) {
        int i;
        fprintf(fh, "Displacement:");
        for (i = 0; i < res->disp_len; i++)
            fprintf(fh, " %02x", res->disp[i]);
        fprintf(fh, "\n");
    }
    if (res->imm_len > 0) {
        int i;
        fprintf(fh, "Immediate Data:");
        for (i = 0; i < res->imm_len; i++)
            fprintf(fh, " %02x", res->imm[i]);
        fprintf(fh, "\n");
    }
    if (res->nprefs > 0) {
        int i;
        fprintf(fh, "Prefix Bytes:");
        for (i = 0; i < res->nprefs; i++)
            fprintf(fh, " %02x", res->prefix[i]);
        fprintf(fh, "\n");
    }
        
    fprintf(fh, "Bytes read: %s\n", res->bytes);
}

// dump the content of Result instance to Perl code:
char* dump_res_to_perl(Result* res) {
    enum { BUFSIZE = 10, CODE_BUF_SIZE = 512 };
    char buf[BUFSIZE];
    char *code;
    int len;

    len = 0;
    code = (char*) malloc(CODE_BUF_SIZE * sizeof(char));
    assert(code);

    len += sprintf(code + len, "{\n");
    assert(len < CODE_BUF_SIZE);
    len += sprintf(code + len, "  'ins_set' => \"%s\",\n  'ins' => \"%s\",\n  'des' => \"%s\",\n",
        res->ins_set, res->ins, res->des);
    assert(len < CODE_BUF_SIZE);
    if (res->subdes) {
        len += sprintf(code + len, "  'subdes' => \"%s\",\n", res->subdes);
        assert(len < CODE_BUF_SIZE);
    }
    len += sprintf(code + len, "  'encoding' => \"%s\",\n", res->encoding);
    assert(len < CODE_BUF_SIZE);

    if (res->bits16 == 1) {
        len += sprintf(code + len, "  'bits16' => '1',\n");
        assert(len < CODE_BUF_SIZE);
    }

[%- FOREACH bit IN idu.bit_fields %]
    if (defined(res->[% bit %])) {
        len += sprintf(code + len, "  '[% bit %]' => '%1d',\n", res->[% bit %]);
        assert(len < CODE_BUF_SIZE);
    }
[% END -%]

[%- FOREACH reg IN ['reg', 'reg1', 'reg2', 'sreg3', 'eee', 'ST_i'] %]
    dump_byte((Byte)res->[% reg %], buf);
    if (defined(res->[% reg %])) {
        len += sprintf(code + len, "  '[% reg %]' => '%3s',\n", buf + 5);
        assert(len < CODE_BUF_SIZE);
    }
[%- END %]

[%- FOREACH reg IN ['tttn'] %]
    dump_byte((Byte)res->[% reg %], buf);
    if (defined(res->[% reg %])) {
        len += sprintf(code + len, "  '[% reg %]' => '%4s',\n", buf + 4);
        assert(len < CODE_BUF_SIZE);
    }
[%- END %]

    dump_byte((Byte)res->sreg2, buf);
    if (defined(res->sreg2)) {
        len += sprintf(code + len, "  'sreg2' => '%2s',\n", buf + 6);
        assert(len < CODE_BUF_SIZE);
    }

    if (defined(res->mod)) {
        dump_byte((Byte)res->mod, buf);
        len += sprintf(code + len, "  'mod' => '%2s',\n", buf + 6);
        dump_byte((Byte)res->rm, buf);
        len += sprintf(code + len, "  'rm' => '%3s',\n", buf + 5);
        assert(len < CODE_BUF_SIZE);
    }

    if (defined(res->base_reg)) {
        dump_byte((Byte)res->base_reg, buf);
        len += sprintf(code + len, "  'base_reg' => '%3s',\n", buf + 5);
        assert(len < CODE_BUF_SIZE);
    }
    if (defined(res->index_reg)) {
        dump_byte((Byte)res->index_reg, buf);
        len += sprintf(code + len, "  'index_reg' => '%3s',\n", buf + 5);
        assert(len < CODE_BUF_SIZE);
    }
    if (defined(res->scale)) {
        dump_byte((Byte)res->scale, buf);
        len += sprintf(code + len, "  'scale' => '%2s',\n", buf + 6);
        assert(len < CODE_BUF_SIZE);
    }
    if (res->disp_len > 0) {
        int i;
        len += sprintf(code + len, "  'disp' => [qw(");
        for (i = 0; i < res->disp_len; i++) {
            len += sprintf(code + len, " %02x", res->disp[i]);
            assert(len < CODE_BUF_SIZE);
        }
        len += sprintf(code + len, " )],\n");
        assert(len < CODE_BUF_SIZE);
    }
    if (res->imm_len > 0) {
        int i;
        len += sprintf(code + len, "  'imm' => [qw(");
        for (i = 0; i < res->imm_len; i++) {
            len += sprintf(code + len, " %02x", res->imm[i]);
            assert(len < CODE_BUF_SIZE);
        }
        len += sprintf(code + len, " )],\n");
        assert(len < CODE_BUF_SIZE);
    }
    if (res->nprefs > 0) {
        int i;
        len += sprintf(code + len, "  'prefix' => [qw(");
        for (i = 0; i < res->nprefs; i++) {
            len += sprintf(code + len, " %02x", res->prefix[i]);
            assert(len < CODE_BUF_SIZE);
        }
        len += sprintf(code + len, " )],\n");
        assert(len < CODE_BUF_SIZE);
    }
    len += sprintf(code + len, "  'bytes' => [qw( %s )],\n", res->bytes);
    assert(len < CODE_BUF_SIZE);
    len += sprintf(code + len, "};\n");
    assert(len < CODE_BUF_SIZE);
    return code;
}

enum {
[% count = 0 %]
[%- FOREACH state IN states %]
    [%- IF count == 0 %]
        [%- GET "    S_" _ state.state_id _ "," %]
    [%- ELSE %]
        [%- GET " S_" _ state.state_id _ "," %]
    [%- END %]
    [%- count = count + 1 %]
    [%- IF count == 10 %]
        [%- GET "\n"; count = 0 %]
    [%- END %]
[%- END %]
    S_START, S_PREFIX,
    S_END_ERROR, S_SYN_ERROR, S_TOO_MANY_PREF
};

// Decode one instruction:
Result* decode(char* src) {
    const char* saved_src;
    char oldbytes[BUFSIZE];
    Byte byte;
    Byte bytes[NBYTES_MAX];
    Result* res;
    int state, len, retval, success = 1;

    res = new_res();
    if (src != NULL) set_source(src);
    saved_src = Source;
    state = S_START;
    while (1) {
        if (Debug) {
            int val = byte;
            fprintf(stderr, "Switching to state %d with byte %02x...\n", state, val);
        }
        switch (state) {
        case S_START:
            retval = readbytes(bytes, 1);
            //CARP("retval - %d", retval);
            if (retval == EOF) {
                //Source = "";
                Error[0] = '\0';
                return 0;
            } else if (retval == 0) {
                state = S_SYN_ERROR;
                continue;
            }
            byte = bytes[0];
        case S_PREFIX:
            // Process preffix byte (if any):
            switch(byte) {
            [%- FOREACH prefix IN idu.prefixes %]
            case 0x[% prefix %]:
                if (res->nprefs == NBYTES_MAX) {
                    state = S_TOO_MANY_PREF;
                    break;
                }
                res->prefix[res->nprefs++] = 0x[% prefix %];
                [% IF prefix == '66' %]
                res->bits16 = 1;
                [% END %]
                READ_BYTE
                state = S_PREFIX;
                break;
            [%- END %]
            default:
                state = S_[% states.0.state_id %];
                break;
            }
            break;
        [%- FOREACH state IN states %]
        case S_[% state.state_id %]:
          [%- # Process the various fields (if any) -%]

          [%- IF state.item('mod') OR state.modA %]
            // Process the current ModR/M byte:
            retval = process_ModRM(res, byte);
            if (retval == EOF) {
                state = S_END_ERROR;
                break;
            } else if (retval == 0) {
                state = S_SYN_ERROR;
                break;
            }
          [%- END -%]

          [%- FOREACH bit IN idu.bit_fields %]
              [%- NEXT UNLESS state.$bit.defined %]
            // Get the [% bit %] field from the current byte:
            res->[% bit %] = slice(byte, [% state.$bit %], [% state.$bit %]);
          [%- END -%]

          [%- FOREACH reg IN idu.reg_fields %]
            [%- NEXT UNLESS state.$reg %]
            // Get the [% reg %] field from the current byte:
            res->[% reg %] = slice(byte, [% state.$reg.0
                %], [% state.$reg.1 %]);
          [%- END -%]

          [%- IF state.imm == 'full' %]
            // Get full immediate data:
            len = res->bits16 ? 2 : 4;
            READ_IMM_DATA(len)
          [%- ELSIF state.imm == 'normal' %]
            // Get immediate data:
            len = get_imm_len(res->s, res->w, res->bits16);
            READ_IMM_DATA(len)
            [%- ELSIF state.imm == 'pointer' %]
            // Get immediate data:
            len = res->bits16 ? 4 : 6;
            READ_IMM_DATA(len)
            [%- ELSIF state.imm %]
            [%- nbytes = state.imm / 8;
                nbytes = Perl.int(nbytes) %]
            // Get [% state.imm %]-bit immediate data:
            [%- IF state.pattern and nbytes == 1 %]
            res->imm[0] = byte;
            res->imm_len = 1;
            [%- ELSE %]
            len = [% nbytes %];
            READ_IMM_DATA(len)
            [%- END -%]
          [%- END %]

          [%- # Determine the next state -%]

          [%- IF state.next.0.pattern  # Conditional switch %]
            [%- UNLESS state == states.0 %]
            READ_BYTE
            [%- END -%]

            [%- FOREACH next_state IN state.next %]
            [%- regex = next_state.pattern %]
            [% GET '} else ' UNLESS next_state == state.next.0
            %]if (match(byte, "[% regex %]")) {
                state = S_[% next_state.state %];
            [%- END %]
            } else {
                state = S_SYN_ERROR;
            }
          [%- ELSIF state.next.0  # Unconditional switch %]
            state = S_[% state.next.0.state %];
          [%- ELSE  # Reach the end of the instruction %]
            res->ins = "[% state.ins.op_name %]";
            res->des = "[% state.ins.des %]";
            [%- IF state.ins.sub_des %]
            res->subdes = "[% state.ins.sub_des %]";
            [%- END %]
            res->encoding = "[% state.ins.encoding %]";
            res->ins_set = "[% state.ins.ins_set %]";
            len = Source - saved_src;
            strncpy(res->bytes, saved_src, len);
            res->bytes[len] = '\0';
            return res;
          [%- END %]
            break;
        [%- END %]
        case S_SYN_ERROR: // Syntax error
            len = Source - saved_src;
            //CARP("len - %d", len)
            strncpy(oldbytes, saved_src, len);
            oldbytes[len] = '\0';
            sprintf(Error,
                    "syntax error - unexpected byte \"%s\": %s",
                    Token, oldbytes
            );
            success = 0;
            break;
        case S_END_ERROR:
            len = Source - saved_src;
            strncpy(oldbytes, saved_src, len);
            oldbytes[len] = '\0';
            sprintf(Error,
                    "syntax error - unexpected end of input: %s",
                    oldbytes
            );
            success = 0;
            break;
        case S_TOO_MANY_PREF:
            len = Source - saved_src;
            strncpy(oldbytes, saved_src, len);
            oldbytes[len] = '\0';
            sprintf(Error,
                    "fatal error - Too many prefix bytes: %s",
                    oldbytes
            );
            success = 0;
            break;
        default:
            sprintf(Error,
                    "core error - unknown state state reached: %d: %s",
                    state, oldbytes
            );
            success = 0;
            break;
        }
        if (!success) break;
    }
    free(res);
    return NULL;
}

void free_ptr(void* p) { free(p); }
